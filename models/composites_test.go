// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testComposites(t *testing.T) {
	t.Parallel()

	query := Composites()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompositesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompositesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Composites().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompositesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompositeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompositesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompositeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Composite exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompositeExists to return true, but got false.")
	}
}

func testCompositesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	compositeFound, err := FindComposite(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if compositeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompositesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Composites().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompositesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Composites().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompositesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	compositeOne := &Composite{}
	compositeTwo := &Composite{}
	if err = randomize.Struct(seed, compositeOne, compositeDBTypes, false, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}
	if err = randomize.Struct(seed, compositeTwo, compositeDBTypes, false, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = compositeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = compositeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Composites().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompositesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	compositeOne := &Composite{}
	compositeTwo := &Composite{}
	if err = randomize.Struct(seed, compositeOne, compositeDBTypes, false, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}
	if err = randomize.Struct(seed, compositeTwo, compositeDBTypes, false, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = compositeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = compositeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCompositesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompositesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(compositeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompositeToManyCompositesRooms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Composite
	var b, c CompositesRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, compositesRoomDBTypes, false, compositesRoomColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, compositesRoomDBTypes, false, compositesRoomColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompositeID = a.ID
	c.CompositeID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CompositesRooms().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompositeID == b.CompositeID {
			bFound = true
		}
		if v.CompositeID == c.CompositeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompositeSlice{&a}
	if err = a.L.LoadCompositesRooms(tx, false, (*[]*Composite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompositesRooms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CompositesRooms = nil
	if err = a.L.LoadCompositesRooms(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompositesRooms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompositeToManyAddOpCompositesRooms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Composite
	var b, c, d, e CompositesRoom

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, compositeDBTypes, false, strmangle.SetComplement(compositePrimaryKeyColumns, compositeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompositesRoom{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, compositesRoomDBTypes, false, strmangle.SetComplement(compositesRoomPrimaryKeyColumns, compositesRoomColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CompositesRoom{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompositesRooms(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CompositeID {
			t.Error("foreign key was wrong value", a.ID, first.CompositeID)
		}
		if a.ID != second.CompositeID {
			t.Error("foreign key was wrong value", a.ID, second.CompositeID)
		}

		if first.R.Composite != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Composite != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CompositesRooms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CompositesRooms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CompositesRooms().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCompositesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCompositesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompositeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testCompositesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Composites().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	compositeDBTypes = map[string]string{`ID`: `bigint`, `Name`: `character varying`, `Description`: `character varying`}
	_                = bytes.MinRead
)

func testCompositesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(compositePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(compositeAllColumns) == len(compositePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompositesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(compositeAllColumns) == len(compositePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Composite{}
	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, compositeDBTypes, true, compositePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(compositeAllColumns, compositePrimaryKeyColumns) {
		fields = compositeAllColumns
	} else {
		fields = strmangle.SetComplement(
			compositeAllColumns,
			compositePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompositeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompositesUpsert(t *testing.T) {
	t.Parallel()

	if len(compositeAllColumns) == len(compositePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Composite{}
	if err = randomize.Struct(seed, &o, compositeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Composite: %s", err)
	}

	count, err := Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, compositeDBTypes, false, compositePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Composite struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Composite: %s", err)
	}

	count, err = Composites().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
