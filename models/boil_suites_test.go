// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Composites", testComposites)
	t.Run("CompositesRooms", testCompositesRooms)
	t.Run("Gateways", testGateways)
	t.Run("Rooms", testRooms)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Sessions", testSessions)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Composites", testCompositesDelete)
	t.Run("CompositesRooms", testCompositesRoomsDelete)
	t.Run("Gateways", testGatewaysDelete)
	t.Run("Rooms", testRoomsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Sessions", testSessionsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Composites", testCompositesQueryDeleteAll)
	t.Run("CompositesRooms", testCompositesRoomsQueryDeleteAll)
	t.Run("Gateways", testGatewaysQueryDeleteAll)
	t.Run("Rooms", testRoomsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Sessions", testSessionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Composites", testCompositesSliceDeleteAll)
	t.Run("CompositesRooms", testCompositesRoomsSliceDeleteAll)
	t.Run("Gateways", testGatewaysSliceDeleteAll)
	t.Run("Rooms", testRoomsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Sessions", testSessionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Composites", testCompositesExists)
	t.Run("CompositesRooms", testCompositesRoomsExists)
	t.Run("Gateways", testGatewaysExists)
	t.Run("Rooms", testRoomsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Sessions", testSessionsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Composites", testCompositesFind)
	t.Run("CompositesRooms", testCompositesRoomsFind)
	t.Run("Gateways", testGatewaysFind)
	t.Run("Rooms", testRoomsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Sessions", testSessionsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Composites", testCompositesBind)
	t.Run("CompositesRooms", testCompositesRoomsBind)
	t.Run("Gateways", testGatewaysBind)
	t.Run("Rooms", testRoomsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Sessions", testSessionsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Composites", testCompositesOne)
	t.Run("CompositesRooms", testCompositesRoomsOne)
	t.Run("Gateways", testGatewaysOne)
	t.Run("Rooms", testRoomsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Sessions", testSessionsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Composites", testCompositesAll)
	t.Run("CompositesRooms", testCompositesRoomsAll)
	t.Run("Gateways", testGatewaysAll)
	t.Run("Rooms", testRoomsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Sessions", testSessionsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Composites", testCompositesCount)
	t.Run("CompositesRooms", testCompositesRoomsCount)
	t.Run("Gateways", testGatewaysCount)
	t.Run("Rooms", testRoomsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Sessions", testSessionsCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("Composites", testCompositesInsert)
	t.Run("Composites", testCompositesInsertWhitelist)
	t.Run("CompositesRooms", testCompositesRoomsInsert)
	t.Run("CompositesRooms", testCompositesRoomsInsertWhitelist)
	t.Run("Gateways", testGatewaysInsert)
	t.Run("Gateways", testGatewaysInsertWhitelist)
	t.Run("Rooms", testRoomsInsert)
	t.Run("Rooms", testRoomsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Sessions", testSessionsInsert)
	t.Run("Sessions", testSessionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CompositesRoomToCompositeUsingComposite", testCompositesRoomToOneCompositeUsingComposite)
	t.Run("CompositesRoomToGatewayUsingGateway", testCompositesRoomToOneGatewayUsingGateway)
	t.Run("CompositesRoomToRoomUsingRoom", testCompositesRoomToOneRoomUsingRoom)
	t.Run("RoomToGatewayUsingDefaultGateway", testRoomToOneGatewayUsingDefaultGateway)
	t.Run("SessionToGatewayUsingGateway", testSessionToOneGatewayUsingGateway)
	t.Run("SessionToRoomUsingRoom", testSessionToOneRoomUsingRoom)
	t.Run("SessionToUserUsingUser", testSessionToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CompositeToCompositesRooms", testCompositeToManyCompositesRooms)
	t.Run("GatewayToCompositesRooms", testGatewayToManyCompositesRooms)
	t.Run("GatewayToDefaultGatewayRooms", testGatewayToManyDefaultGatewayRooms)
	t.Run("GatewayToSessions", testGatewayToManySessions)
	t.Run("RoomToCompositesRooms", testRoomToManyCompositesRooms)
	t.Run("RoomToSessions", testRoomToManySessions)
	t.Run("UserToSessions", testUserToManySessions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CompositesRoomToCompositeUsingCompositesRooms", testCompositesRoomToOneSetOpCompositeUsingComposite)
	t.Run("CompositesRoomToGatewayUsingCompositesRooms", testCompositesRoomToOneSetOpGatewayUsingGateway)
	t.Run("CompositesRoomToRoomUsingCompositesRooms", testCompositesRoomToOneSetOpRoomUsingRoom)
	t.Run("RoomToGatewayUsingDefaultGatewayRooms", testRoomToOneSetOpGatewayUsingDefaultGateway)
	t.Run("SessionToGatewayUsingSessions", testSessionToOneSetOpGatewayUsingGateway)
	t.Run("SessionToRoomUsingSessions", testSessionToOneSetOpRoomUsingRoom)
	t.Run("SessionToUserUsingSessions", testSessionToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("SessionToGatewayUsingSessions", testSessionToOneRemoveOpGatewayUsingGateway)
	t.Run("SessionToRoomUsingSessions", testSessionToOneRemoveOpRoomUsingRoom)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CompositeToCompositesRooms", testCompositeToManyAddOpCompositesRooms)
	t.Run("GatewayToCompositesRooms", testGatewayToManyAddOpCompositesRooms)
	t.Run("GatewayToDefaultGatewayRooms", testGatewayToManyAddOpDefaultGatewayRooms)
	t.Run("GatewayToSessions", testGatewayToManyAddOpSessions)
	t.Run("RoomToCompositesRooms", testRoomToManyAddOpCompositesRooms)
	t.Run("RoomToSessions", testRoomToManyAddOpSessions)
	t.Run("UserToSessions", testUserToManyAddOpSessions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("GatewayToSessions", testGatewayToManySetOpSessions)
	t.Run("RoomToSessions", testRoomToManySetOpSessions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("GatewayToSessions", testGatewayToManyRemoveOpSessions)
	t.Run("RoomToSessions", testRoomToManyRemoveOpSessions)
}

func TestReload(t *testing.T) {
	t.Run("Composites", testCompositesReload)
	t.Run("CompositesRooms", testCompositesRoomsReload)
	t.Run("Gateways", testGatewaysReload)
	t.Run("Rooms", testRoomsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Sessions", testSessionsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Composites", testCompositesReloadAll)
	t.Run("CompositesRooms", testCompositesRoomsReloadAll)
	t.Run("Gateways", testGatewaysReloadAll)
	t.Run("Rooms", testRoomsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Sessions", testSessionsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Composites", testCompositesSelect)
	t.Run("CompositesRooms", testCompositesRoomsSelect)
	t.Run("Gateways", testGatewaysSelect)
	t.Run("Rooms", testRoomsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Sessions", testSessionsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Composites", testCompositesUpdate)
	t.Run("CompositesRooms", testCompositesRoomsUpdate)
	t.Run("Gateways", testGatewaysUpdate)
	t.Run("Rooms", testRoomsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Sessions", testSessionsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Composites", testCompositesSliceUpdateAll)
	t.Run("CompositesRooms", testCompositesRoomsSliceUpdateAll)
	t.Run("Gateways", testGatewaysSliceUpdateAll)
	t.Run("Rooms", testRoomsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Sessions", testSessionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
