// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CompositesRoom is an object representing the database table.
type CompositesRoom struct {
	CompositeID int64 `boil:"composite_id" json:"composite_id" toml:"composite_id" yaml:"composite_id"`
	RoomID      int64 `boil:"room_id" json:"room_id" toml:"room_id" yaml:"room_id"`
	GatewayID   int64 `boil:"gateway_id" json:"gateway_id" toml:"gateway_id" yaml:"gateway_id"`
	Position    int   `boil:"position" json:"position" toml:"position" yaml:"position"`

	R *compositesRoomR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L compositesRoomL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompositesRoomColumns = struct {
	CompositeID string
	RoomID      string
	GatewayID   string
	Position    string
}{
	CompositeID: "composite_id",
	RoomID:      "room_id",
	GatewayID:   "gateway_id",
	Position:    "position",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var CompositesRoomWhere = struct {
	CompositeID whereHelperint64
	RoomID      whereHelperint64
	GatewayID   whereHelperint64
	Position    whereHelperint
}{
	CompositeID: whereHelperint64{field: "\"composites_rooms\".\"composite_id\""},
	RoomID:      whereHelperint64{field: "\"composites_rooms\".\"room_id\""},
	GatewayID:   whereHelperint64{field: "\"composites_rooms\".\"gateway_id\""},
	Position:    whereHelperint{field: "\"composites_rooms\".\"position\""},
}

// CompositesRoomRels is where relationship names are stored.
var CompositesRoomRels = struct {
	Composite string
	Gateway   string
	Room      string
}{
	Composite: "Composite",
	Gateway:   "Gateway",
	Room:      "Room",
}

// compositesRoomR is where relationships are stored.
type compositesRoomR struct {
	Composite *Composite
	Gateway   *Gateway
	Room      *Room
}

// NewStruct creates a new relationship struct
func (*compositesRoomR) NewStruct() *compositesRoomR {
	return &compositesRoomR{}
}

// compositesRoomL is where Load methods for each relationship are stored.
type compositesRoomL struct{}

var (
	compositesRoomAllColumns            = []string{"composite_id", "room_id", "gateway_id", "position"}
	compositesRoomColumnsWithoutDefault = []string{"composite_id", "room_id", "gateway_id"}
	compositesRoomColumnsWithDefault    = []string{"position"}
	compositesRoomPrimaryKeyColumns     = []string{"composite_id", "room_id", "gateway_id", "position"}
)

type (
	// CompositesRoomSlice is an alias for a slice of pointers to CompositesRoom.
	// This should generally be used opposed to []CompositesRoom.
	CompositesRoomSlice []*CompositesRoom

	compositesRoomQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	compositesRoomType                 = reflect.TypeOf(&CompositesRoom{})
	compositesRoomMapping              = queries.MakeStructMapping(compositesRoomType)
	compositesRoomPrimaryKeyMapping, _ = queries.BindMapping(compositesRoomType, compositesRoomMapping, compositesRoomPrimaryKeyColumns)
	compositesRoomInsertCacheMut       sync.RWMutex
	compositesRoomInsertCache          = make(map[string]insertCache)
	compositesRoomUpdateCacheMut       sync.RWMutex
	compositesRoomUpdateCache          = make(map[string]updateCache)
	compositesRoomUpsertCacheMut       sync.RWMutex
	compositesRoomUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single compositesRoom record from the query.
func (q compositesRoomQuery) One(exec boil.Executor) (*CompositesRoom, error) {
	o := &CompositesRoom{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for composites_rooms")
	}

	return o, nil
}

// All returns all CompositesRoom records from the query.
func (q compositesRoomQuery) All(exec boil.Executor) (CompositesRoomSlice, error) {
	var o []*CompositesRoom

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompositesRoom slice")
	}

	return o, nil
}

// Count returns the count of all CompositesRoom records in the query.
func (q compositesRoomQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count composites_rooms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q compositesRoomQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if composites_rooms exists")
	}

	return count > 0, nil
}

// Composite pointed to by the foreign key.
func (o *CompositesRoom) Composite(mods ...qm.QueryMod) compositeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CompositeID),
	}

	queryMods = append(queryMods, mods...)

	query := Composites(queryMods...)
	queries.SetFrom(query.Query, "\"composites\"")

	return query
}

// Gateway pointed to by the foreign key.
func (o *CompositesRoom) Gateway(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GatewayID),
	}

	queryMods = append(queryMods, mods...)

	query := Gateways(queryMods...)
	queries.SetFrom(query.Query, "\"gateways\"")

	return query
}

// Room pointed to by the foreign key.
func (o *CompositesRoom) Room(mods ...qm.QueryMod) roomQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoomID),
	}

	queryMods = append(queryMods, mods...)

	query := Rooms(queryMods...)
	queries.SetFrom(query.Query, "\"rooms\"")

	return query
}

// LoadComposite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compositesRoomL) LoadComposite(e boil.Executor, singular bool, maybeCompositesRoom interface{}, mods queries.Applicator) error {
	var slice []*CompositesRoom
	var object *CompositesRoom

	if singular {
		object = maybeCompositesRoom.(*CompositesRoom)
	} else {
		slice = *maybeCompositesRoom.(*[]*CompositesRoom)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compositesRoomR{}
		}
		args = append(args, object.CompositeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compositesRoomR{}
			}

			for _, a := range args {
				if a == obj.CompositeID {
					continue Outer
				}
			}

			args = append(args, obj.CompositeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`composites`), qm.WhereIn(`composites.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Composite")
	}

	var resultSlice []*Composite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Composite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for composites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for composites")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Composite = foreign
		if foreign.R == nil {
			foreign.R = &compositeR{}
		}
		foreign.R.CompositesRooms = append(foreign.R.CompositesRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompositeID == foreign.ID {
				local.R.Composite = foreign
				if foreign.R == nil {
					foreign.R = &compositeR{}
				}
				foreign.R.CompositesRooms = append(foreign.R.CompositesRooms, local)
				break
			}
		}
	}

	return nil
}

// LoadGateway allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compositesRoomL) LoadGateway(e boil.Executor, singular bool, maybeCompositesRoom interface{}, mods queries.Applicator) error {
	var slice []*CompositesRoom
	var object *CompositesRoom

	if singular {
		object = maybeCompositesRoom.(*CompositesRoom)
	} else {
		slice = *maybeCompositesRoom.(*[]*CompositesRoom)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compositesRoomR{}
		}
		args = append(args, object.GatewayID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compositesRoomR{}
			}

			for _, a := range args {
				if a == obj.GatewayID {
					continue Outer
				}
			}

			args = append(args, obj.GatewayID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`gateways`), qm.WhereIn(`gateways.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gateways")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateways")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Gateway = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.CompositesRooms = append(foreign.R.CompositesRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GatewayID == foreign.ID {
				local.R.Gateway = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.CompositesRooms = append(foreign.R.CompositesRooms, local)
				break
			}
		}
	}

	return nil
}

// LoadRoom allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (compositesRoomL) LoadRoom(e boil.Executor, singular bool, maybeCompositesRoom interface{}, mods queries.Applicator) error {
	var slice []*CompositesRoom
	var object *CompositesRoom

	if singular {
		object = maybeCompositesRoom.(*CompositesRoom)
	} else {
		slice = *maybeCompositesRoom.(*[]*CompositesRoom)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &compositesRoomR{}
		}
		args = append(args, object.RoomID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &compositesRoomR{}
			}

			for _, a := range args {
				if a == obj.RoomID {
					continue Outer
				}
			}

			args = append(args, obj.RoomID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`rooms`), qm.WhereIn(`rooms.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Room")
	}

	var resultSlice []*Room
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Room")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rooms")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Room = foreign
		if foreign.R == nil {
			foreign.R = &roomR{}
		}
		foreign.R.CompositesRooms = append(foreign.R.CompositesRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoomID == foreign.ID {
				local.R.Room = foreign
				if foreign.R == nil {
					foreign.R = &roomR{}
				}
				foreign.R.CompositesRooms = append(foreign.R.CompositesRooms, local)
				break
			}
		}
	}

	return nil
}

// SetComposite of the compositesRoom to the related item.
// Sets o.R.Composite to related.
// Adds o to related.R.CompositesRooms.
func (o *CompositesRoom) SetComposite(exec boil.Executor, insert bool, related *Composite) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"composites_rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"composite_id"}),
		strmangle.WhereClause("\"", "\"", 2, compositesRoomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CompositeID, o.RoomID, o.GatewayID, o.Position}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompositeID = related.ID
	if o.R == nil {
		o.R = &compositesRoomR{
			Composite: related,
		}
	} else {
		o.R.Composite = related
	}

	if related.R == nil {
		related.R = &compositeR{
			CompositesRooms: CompositesRoomSlice{o},
		}
	} else {
		related.R.CompositesRooms = append(related.R.CompositesRooms, o)
	}

	return nil
}

// SetGateway of the compositesRoom to the related item.
// Sets o.R.Gateway to related.
// Adds o to related.R.CompositesRooms.
func (o *CompositesRoom) SetGateway(exec boil.Executor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"composites_rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"gateway_id"}),
		strmangle.WhereClause("\"", "\"", 2, compositesRoomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CompositeID, o.RoomID, o.GatewayID, o.Position}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GatewayID = related.ID
	if o.R == nil {
		o.R = &compositesRoomR{
			Gateway: related,
		}
	} else {
		o.R.Gateway = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			CompositesRooms: CompositesRoomSlice{o},
		}
	} else {
		related.R.CompositesRooms = append(related.R.CompositesRooms, o)
	}

	return nil
}

// SetRoom of the compositesRoom to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.CompositesRooms.
func (o *CompositesRoom) SetRoom(exec boil.Executor, insert bool, related *Room) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"composites_rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
		strmangle.WhereClause("\"", "\"", 2, compositesRoomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CompositeID, o.RoomID, o.GatewayID, o.Position}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoomID = related.ID
	if o.R == nil {
		o.R = &compositesRoomR{
			Room: related,
		}
	} else {
		o.R.Room = related
	}

	if related.R == nil {
		related.R = &roomR{
			CompositesRooms: CompositesRoomSlice{o},
		}
	} else {
		related.R.CompositesRooms = append(related.R.CompositesRooms, o)
	}

	return nil
}

// CompositesRooms retrieves all the records using an executor.
func CompositesRooms(mods ...qm.QueryMod) compositesRoomQuery {
	mods = append(mods, qm.From("\"composites_rooms\""))
	return compositesRoomQuery{NewQuery(mods...)}
}

// FindCompositesRoom retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompositesRoom(exec boil.Executor, compositeID int64, roomID int64, gatewayID int64, position int, selectCols ...string) (*CompositesRoom, error) {
	compositesRoomObj := &CompositesRoom{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"composites_rooms\" where \"composite_id\"=$1 AND \"room_id\"=$2 AND \"gateway_id\"=$3 AND \"position\"=$4", sel,
	)

	q := queries.Raw(query, compositeID, roomID, gatewayID, position)

	err := q.Bind(nil, exec, compositesRoomObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from composites_rooms")
	}

	return compositesRoomObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompositesRoom) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no composites_rooms provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(compositesRoomColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	compositesRoomInsertCacheMut.RLock()
	cache, cached := compositesRoomInsertCache[key]
	compositesRoomInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			compositesRoomAllColumns,
			compositesRoomColumnsWithDefault,
			compositesRoomColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(compositesRoomType, compositesRoomMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(compositesRoomType, compositesRoomMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"composites_rooms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"composites_rooms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into composites_rooms")
	}

	if !cached {
		compositesRoomInsertCacheMut.Lock()
		compositesRoomInsertCache[key] = cache
		compositesRoomInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CompositesRoom.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompositesRoom) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	compositesRoomUpdateCacheMut.RLock()
	cache, cached := compositesRoomUpdateCache[key]
	compositesRoomUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			compositesRoomAllColumns,
			compositesRoomPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update composites_rooms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"composites_rooms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, compositesRoomPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(compositesRoomType, compositesRoomMapping, append(wl, compositesRoomPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update composites_rooms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for composites_rooms")
	}

	if !cached {
		compositesRoomUpdateCacheMut.Lock()
		compositesRoomUpdateCache[key] = cache
		compositesRoomUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q compositesRoomQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for composites_rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for composites_rooms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompositesRoomSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compositesRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"composites_rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, compositesRoomPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in compositesRoom slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all compositesRoom")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompositesRoom) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no composites_rooms provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(compositesRoomColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	compositesRoomUpsertCacheMut.RLock()
	cache, cached := compositesRoomUpsertCache[key]
	compositesRoomUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			compositesRoomAllColumns,
			compositesRoomColumnsWithDefault,
			compositesRoomColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			compositesRoomAllColumns,
			compositesRoomPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert composites_rooms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(compositesRoomPrimaryKeyColumns))
			copy(conflict, compositesRoomPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"composites_rooms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(compositesRoomType, compositesRoomMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(compositesRoomType, compositesRoomMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert composites_rooms")
	}

	if !cached {
		compositesRoomUpsertCacheMut.Lock()
		compositesRoomUpsertCache[key] = cache
		compositesRoomUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CompositesRoom record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompositesRoom) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompositesRoom provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), compositesRoomPrimaryKeyMapping)
	sql := "DELETE FROM \"composites_rooms\" WHERE \"composite_id\"=$1 AND \"room_id\"=$2 AND \"gateway_id\"=$3 AND \"position\"=$4"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from composites_rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for composites_rooms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q compositesRoomQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no compositesRoomQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from composites_rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for composites_rooms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompositesRoomSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compositesRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"composites_rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, compositesRoomPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from compositesRoom slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for composites_rooms")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompositesRoom) Reload(exec boil.Executor) error {
	ret, err := FindCompositesRoom(exec, o.CompositeID, o.RoomID, o.GatewayID, o.Position)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompositesRoomSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompositesRoomSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compositesRoomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"composites_rooms\".* FROM \"composites_rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, compositesRoomPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompositesRoomSlice")
	}

	*o = slice

	return nil
}

// CompositesRoomExists checks if the CompositesRoom row exists.
func CompositesRoomExists(exec boil.Executor, compositeID int64, roomID int64, gatewayID int64, position int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"composites_rooms\" where \"composite_id\"=$1 AND \"room_id\"=$2 AND \"gateway_id\"=$3 AND \"position\"=$4 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, compositeID, roomID, gatewayID, position)
	}
	row := exec.QueryRow(sql, compositeID, roomID, gatewayID, position)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if composites_rooms exists")
	}

	return exists, nil
}
