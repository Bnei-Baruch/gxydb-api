// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Room is an object representing the database table.
type Room struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	DefaultGatewayID int64     `boil:"default_gateway_id" json:"default_gateway_id" toml:"default_gateway_id" yaml:"default_gateway_id"`
	GatewayUID       int       `boil:"gateway_uid" json:"gateway_uid" toml:"gateway_uid" yaml:"gateway_uid"`
	Secret           string    `boil:"secret" json:"secret" toml:"secret" yaml:"secret"`
	Disabled         bool      `boil:"disabled" json:"disabled" toml:"disabled" yaml:"disabled"`
	Properties       null.JSON `boil:"properties" json:"properties,omitempty" toml:"properties" yaml:"properties,omitempty"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	RemovedAt        null.Time `boil:"removed_at" json:"removed_at,omitempty" toml:"removed_at" yaml:"removed_at,omitempty"`

	R *roomR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomColumns = struct {
	ID               string
	Name             string
	DefaultGatewayID string
	GatewayUID       string
	Secret           string
	Disabled         string
	Properties       string
	CreatedAt        string
	UpdatedAt        string
	RemovedAt        string
}{
	ID:               "id",
	Name:             "name",
	DefaultGatewayID: "default_gateway_id",
	GatewayUID:       "gateway_uid",
	Secret:           "secret",
	Disabled:         "disabled",
	Properties:       "properties",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	RemovedAt:        "removed_at",
}

// Generated where

var RoomWhere = struct {
	ID               whereHelperint64
	Name             whereHelperstring
	DefaultGatewayID whereHelperint64
	GatewayUID       whereHelperint
	Secret           whereHelperstring
	Disabled         whereHelperbool
	Properties       whereHelpernull_JSON
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpernull_Time
	RemovedAt        whereHelpernull_Time
}{
	ID:               whereHelperint64{field: "\"rooms\".\"id\""},
	Name:             whereHelperstring{field: "\"rooms\".\"name\""},
	DefaultGatewayID: whereHelperint64{field: "\"rooms\".\"default_gateway_id\""},
	GatewayUID:       whereHelperint{field: "\"rooms\".\"gateway_uid\""},
	Secret:           whereHelperstring{field: "\"rooms\".\"secret\""},
	Disabled:         whereHelperbool{field: "\"rooms\".\"disabled\""},
	Properties:       whereHelpernull_JSON{field: "\"rooms\".\"properties\""},
	CreatedAt:        whereHelpertime_Time{field: "\"rooms\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"rooms\".\"updated_at\""},
	RemovedAt:        whereHelpernull_Time{field: "\"rooms\".\"removed_at\""},
}

// RoomRels is where relationship names are stored.
var RoomRels = struct {
	DefaultGateway  string
	CompositesRooms string
	Sessions        string
}{
	DefaultGateway:  "DefaultGateway",
	CompositesRooms: "CompositesRooms",
	Sessions:        "Sessions",
}

// roomR is where relationships are stored.
type roomR struct {
	DefaultGateway  *Gateway
	CompositesRooms CompositesRoomSlice
	Sessions        SessionSlice
}

// NewStruct creates a new relationship struct
func (*roomR) NewStruct() *roomR {
	return &roomR{}
}

// roomL is where Load methods for each relationship are stored.
type roomL struct{}

var (
	roomAllColumns            = []string{"id", "name", "default_gateway_id", "gateway_uid", "secret", "disabled", "properties", "created_at", "updated_at", "removed_at"}
	roomColumnsWithoutDefault = []string{"name", "default_gateway_id", "gateway_uid", "secret", "properties", "updated_at", "removed_at"}
	roomColumnsWithDefault    = []string{"id", "disabled", "created_at"}
	roomPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoomSlice is an alias for a slice of pointers to Room.
	// This should generally be used opposed to []Room.
	RoomSlice []*Room

	roomQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomType                 = reflect.TypeOf(&Room{})
	roomMapping              = queries.MakeStructMapping(roomType)
	roomPrimaryKeyMapping, _ = queries.BindMapping(roomType, roomMapping, roomPrimaryKeyColumns)
	roomInsertCacheMut       sync.RWMutex
	roomInsertCache          = make(map[string]insertCache)
	roomUpdateCacheMut       sync.RWMutex
	roomUpdateCache          = make(map[string]updateCache)
	roomUpsertCacheMut       sync.RWMutex
	roomUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single room record from the query.
func (q roomQuery) One(exec boil.Executor) (*Room, error) {
	o := &Room{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rooms")
	}

	return o, nil
}

// All returns all Room records from the query.
func (q roomQuery) All(exec boil.Executor) (RoomSlice, error) {
	var o []*Room

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Room slice")
	}

	return o, nil
}

// Count returns the count of all Room records in the query.
func (q roomQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rooms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roomQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rooms exists")
	}

	return count > 0, nil
}

// DefaultGateway pointed to by the foreign key.
func (o *Room) DefaultGateway(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DefaultGatewayID),
	}

	queryMods = append(queryMods, mods...)

	query := Gateways(queryMods...)
	queries.SetFrom(query.Query, "\"gateways\"")

	return query
}

// CompositesRooms retrieves all the composites_room's CompositesRooms with an executor.
func (o *Room) CompositesRooms(mods ...qm.QueryMod) compositesRoomQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"composites_rooms\".\"room_id\"=?", o.ID),
	)

	query := CompositesRooms(queryMods...)
	queries.SetFrom(query.Query, "\"composites_rooms\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"composites_rooms\".*"})
	}

	return query
}

// Sessions retrieves all the session's Sessions with an executor.
func (o *Room) Sessions(mods ...qm.QueryMod) sessionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sessions\".\"room_id\"=?", o.ID),
	)

	query := Sessions(queryMods...)
	queries.SetFrom(query.Query, "\"sessions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"sessions\".*"})
	}

	return query
}

// LoadDefaultGateway allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomL) LoadDefaultGateway(e boil.Executor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args = append(args, object.DefaultGatewayID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			for _, a := range args {
				if a == obj.DefaultGatewayID {
					continue Outer
				}
			}

			args = append(args, obj.DefaultGatewayID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`gateways`), qm.WhereIn(`gateways.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gateways")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateways")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefaultGateway = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.DefaultGatewayRooms = append(foreign.R.DefaultGatewayRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DefaultGatewayID == foreign.ID {
				local.R.DefaultGateway = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.DefaultGatewayRooms = append(foreign.R.DefaultGatewayRooms, local)
				break
			}
		}
	}

	return nil
}

// LoadCompositesRooms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roomL) LoadCompositesRooms(e boil.Executor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`composites_rooms`), qm.WhereIn(`composites_rooms.room_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load composites_rooms")
	}

	var resultSlice []*CompositesRoom
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice composites_rooms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on composites_rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for composites_rooms")
	}

	if singular {
		object.R.CompositesRooms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &compositesRoomR{}
			}
			foreign.R.Room = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoomID {
				local.R.CompositesRooms = append(local.R.CompositesRooms, foreign)
				if foreign.R == nil {
					foreign.R = &compositesRoomR{}
				}
				foreign.R.Room = local
				break
			}
		}
	}

	return nil
}

// LoadSessions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roomL) LoadSessions(e boil.Executor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		object = maybeRoom.(*Room)
	} else {
		slice = *maybeRoom.(*[]*Room)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`sessions`), qm.WhereIn(`sessions.room_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sessions")
	}

	var resultSlice []*Session
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sessions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sessions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sessions")
	}

	if singular {
		object.R.Sessions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sessionR{}
			}
			foreign.R.Room = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoomID) {
				local.R.Sessions = append(local.R.Sessions, foreign)
				if foreign.R == nil {
					foreign.R = &sessionR{}
				}
				foreign.R.Room = local
				break
			}
		}
	}

	return nil
}

// SetDefaultGateway of the room to the related item.
// Sets o.R.DefaultGateway to related.
// Adds o to related.R.DefaultGatewayRooms.
func (o *Room) SetDefaultGateway(exec boil.Executor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"default_gateway_id"}),
		strmangle.WhereClause("\"", "\"", 2, roomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DefaultGatewayID = related.ID
	if o.R == nil {
		o.R = &roomR{
			DefaultGateway: related,
		}
	} else {
		o.R.DefaultGateway = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			DefaultGatewayRooms: RoomSlice{o},
		}
	} else {
		related.R.DefaultGatewayRooms = append(related.R.DefaultGatewayRooms, o)
	}

	return nil
}

// AddCompositesRooms adds the given related objects to the existing relationships
// of the room, optionally inserting them as new records.
// Appends related to o.R.CompositesRooms.
// Sets related.R.Room appropriately.
func (o *Room) AddCompositesRooms(exec boil.Executor, insert bool, related ...*CompositesRoom) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoomID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"composites_rooms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
				strmangle.WhereClause("\"", "\"", 2, compositesRoomPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CompositeID, rel.RoomID, rel.GatewayID, rel.Position}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoomID = o.ID
		}
	}

	if o.R == nil {
		o.R = &roomR{
			CompositesRooms: related,
		}
	} else {
		o.R.CompositesRooms = append(o.R.CompositesRooms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &compositesRoomR{
				Room: o,
			}
		} else {
			rel.R.Room = o
		}
	}
	return nil
}

// AddSessions adds the given related objects to the existing relationships
// of the room, optionally inserting them as new records.
// Appends related to o.R.Sessions.
// Sets related.R.Room appropriately.
func (o *Room) AddSessions(exec boil.Executor, insert bool, related ...*Session) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoomID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sessions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
				strmangle.WhereClause("\"", "\"", 2, sessionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoomID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roomR{
			Sessions: related,
		}
	} else {
		o.R.Sessions = append(o.R.Sessions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sessionR{
				Room: o,
			}
		} else {
			rel.R.Room = o
		}
	}
	return nil
}

// SetSessions removes all previously related items of the
// room replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Room's Sessions accordingly.
// Replaces o.R.Sessions with related.
// Sets related.R.Room's Sessions accordingly.
func (o *Room) SetSessions(exec boil.Executor, insert bool, related ...*Session) error {
	query := "update \"sessions\" set \"room_id\" = null where \"room_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Sessions {
			queries.SetScanner(&rel.RoomID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Room = nil
		}

		o.R.Sessions = nil
	}
	return o.AddSessions(exec, insert, related...)
}

// RemoveSessions relationships from objects passed in.
// Removes related items from R.Sessions (uses pointer comparison, removal does not keep order)
// Sets related.R.Room.
func (o *Room) RemoveSessions(exec boil.Executor, related ...*Session) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoomID, nil)
		if rel.R != nil {
			rel.R.Room = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("room_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Sessions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Sessions)
			if ln > 1 && i < ln-1 {
				o.R.Sessions[i] = o.R.Sessions[ln-1]
			}
			o.R.Sessions = o.R.Sessions[:ln-1]
			break
		}
	}

	return nil
}

// Rooms retrieves all the records using an executor.
func Rooms(mods ...qm.QueryMod) roomQuery {
	mods = append(mods, qm.From("\"rooms\""))
	return roomQuery{NewQuery(mods...)}
}

// FindRoom retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoom(exec boil.Executor, iD int64, selectCols ...string) (*Room, error) {
	roomObj := &Room{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rooms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, roomObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rooms")
	}

	return roomObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Room) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rooms provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roomInsertCacheMut.RLock()
	cache, cached := roomInsertCache[key]
	roomInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roomAllColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomType, roomMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rooms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rooms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rooms")
	}

	if !cached {
		roomInsertCacheMut.Lock()
		roomInsertCache[key] = cache
		roomInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Room.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Room) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	roomUpdateCacheMut.RLock()
	cache, cached := roomUpdateCache[key]
	roomUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roomAllColumns,
			roomPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rooms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rooms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roomPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, append(wl, roomPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rooms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rooms")
	}

	if !cached {
		roomUpdateCacheMut.Lock()
		roomUpdateCache[key] = cache
		roomUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q roomQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rooms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rooms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roomPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in room slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all room")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Room) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rooms provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomUpsertCacheMut.RLock()
	cache, cached := roomUpsertCache[key]
	roomUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roomAllColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roomAllColumns,
			roomPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rooms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roomPrimaryKeyColumns))
			copy(conflict, roomPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rooms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomType, roomMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rooms")
	}

	if !cached {
		roomUpsertCacheMut.Lock()
		roomUpsertCache[key] = cache
		roomUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Room record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Room) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Room provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomPrimaryKeyMapping)
	sql := "DELETE FROM \"rooms\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rooms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roomQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roomQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rooms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rooms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from room slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rooms")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Room) Reload(exec boil.Executor) error {
	ret, err := FindRoom(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoomSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rooms\".* FROM \"rooms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoomSlice")
	}

	*o = slice

	return nil
}

// RoomExists checks if the Room row exists.
func RoomExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rooms\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rooms exists")
	}

	return exists, nil
}
