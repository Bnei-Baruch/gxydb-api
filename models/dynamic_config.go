// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DynamicConfig is an object representing the database table.
type DynamicConfig struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Key       string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	Value     string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *dynamicConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dynamicConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DynamicConfigColumns = struct {
	ID        string
	Key       string
	Value     string
	UpdatedAt string
}{
	ID:        "id",
	Key:       "key",
	Value:     "value",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DynamicConfigWhere = struct {
	ID        whereHelperint64
	Key       whereHelperstring
	Value     whereHelperstring
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"dynamic_config\".\"id\""},
	Key:       whereHelperstring{field: "\"dynamic_config\".\"key\""},
	Value:     whereHelperstring{field: "\"dynamic_config\".\"value\""},
	UpdatedAt: whereHelpertime_Time{field: "\"dynamic_config\".\"updated_at\""},
}

// DynamicConfigRels is where relationship names are stored.
var DynamicConfigRels = struct {
}{}

// dynamicConfigR is where relationships are stored.
type dynamicConfigR struct {
}

// NewStruct creates a new relationship struct
func (*dynamicConfigR) NewStruct() *dynamicConfigR {
	return &dynamicConfigR{}
}

// dynamicConfigL is where Load methods for each relationship are stored.
type dynamicConfigL struct{}

var (
	dynamicConfigAllColumns            = []string{"id", "key", "value", "updated_at"}
	dynamicConfigColumnsWithoutDefault = []string{"key", "value", "updated_at"}
	dynamicConfigColumnsWithDefault    = []string{"id"}
	dynamicConfigPrimaryKeyColumns     = []string{"id"}
)

type (
	// DynamicConfigSlice is an alias for a slice of pointers to DynamicConfig.
	// This should generally be used opposed to []DynamicConfig.
	DynamicConfigSlice []*DynamicConfig

	dynamicConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dynamicConfigType                 = reflect.TypeOf(&DynamicConfig{})
	dynamicConfigMapping              = queries.MakeStructMapping(dynamicConfigType)
	dynamicConfigPrimaryKeyMapping, _ = queries.BindMapping(dynamicConfigType, dynamicConfigMapping, dynamicConfigPrimaryKeyColumns)
	dynamicConfigInsertCacheMut       sync.RWMutex
	dynamicConfigInsertCache          = make(map[string]insertCache)
	dynamicConfigUpdateCacheMut       sync.RWMutex
	dynamicConfigUpdateCache          = make(map[string]updateCache)
	dynamicConfigUpsertCacheMut       sync.RWMutex
	dynamicConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dynamicConfig record from the query.
func (q dynamicConfigQuery) One(exec boil.Executor) (*DynamicConfig, error) {
	o := &DynamicConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dynamic_config")
	}

	return o, nil
}

// All returns all DynamicConfig records from the query.
func (q dynamicConfigQuery) All(exec boil.Executor) (DynamicConfigSlice, error) {
	var o []*DynamicConfig

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DynamicConfig slice")
	}

	return o, nil
}

// Count returns the count of all DynamicConfig records in the query.
func (q dynamicConfigQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dynamic_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dynamicConfigQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dynamic_config exists")
	}

	return count > 0, nil
}

// DynamicConfigs retrieves all the records using an executor.
func DynamicConfigs(mods ...qm.QueryMod) dynamicConfigQuery {
	mods = append(mods, qm.From("\"dynamic_config\""))
	return dynamicConfigQuery{NewQuery(mods...)}
}

// FindDynamicConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDynamicConfig(exec boil.Executor, iD int64, selectCols ...string) (*DynamicConfig, error) {
	dynamicConfigObj := &DynamicConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dynamic_config\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, dynamicConfigObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dynamic_config")
	}

	return dynamicConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DynamicConfig) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_config provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dynamicConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dynamicConfigInsertCacheMut.RLock()
	cache, cached := dynamicConfigInsertCache[key]
	dynamicConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dynamicConfigAllColumns,
			dynamicConfigColumnsWithDefault,
			dynamicConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dynamicConfigType, dynamicConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dynamicConfigType, dynamicConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dynamic_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dynamic_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dynamic_config")
	}

	if !cached {
		dynamicConfigInsertCacheMut.Lock()
		dynamicConfigInsertCache[key] = cache
		dynamicConfigInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DynamicConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DynamicConfig) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	dynamicConfigUpdateCacheMut.RLock()
	cache, cached := dynamicConfigUpdateCache[key]
	dynamicConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dynamicConfigAllColumns,
			dynamicConfigPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dynamic_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dynamic_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dynamicConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dynamicConfigType, dynamicConfigMapping, append(wl, dynamicConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dynamic_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dynamic_config")
	}

	if !cached {
		dynamicConfigUpdateCacheMut.Lock()
		dynamicConfigUpdateCache[key] = cache
		dynamicConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q dynamicConfigQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dynamic_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dynamic_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DynamicConfigSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dynamic_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dynamicConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dynamicConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dynamicConfig")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DynamicConfig) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_config provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dynamicConfigUpsertCacheMut.RLock()
	cache, cached := dynamicConfigUpsertCache[key]
	dynamicConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dynamicConfigAllColumns,
			dynamicConfigColumnsWithDefault,
			dynamicConfigColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dynamicConfigAllColumns,
			dynamicConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dynamic_config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dynamicConfigPrimaryKeyColumns))
			copy(conflict, dynamicConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dynamic_config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dynamicConfigType, dynamicConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dynamicConfigType, dynamicConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dynamic_config")
	}

	if !cached {
		dynamicConfigUpsertCacheMut.Lock()
		dynamicConfigUpsertCache[key] = cache
		dynamicConfigUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DynamicConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DynamicConfig) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DynamicConfig provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dynamicConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"dynamic_config\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dynamic_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dynamic_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dynamicConfigQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dynamicConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamic_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DynamicConfigSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dynamic_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamicConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_config")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DynamicConfig) Reload(exec boil.Executor) error {
	ret, err := FindDynamicConfig(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DynamicConfigSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DynamicConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dynamic_config\".* FROM \"dynamic_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DynamicConfigSlice")
	}

	*o = slice

	return nil
}

// DynamicConfigExists checks if the DynamicConfig row exists.
func DynamicConfigExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dynamic_config\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dynamic_config exists")
	}

	return exists, nil
}
