package cmd

import (
	"database/sql"
	"fmt"
	"io"
	"os"
	"time"

	pkgerr "github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/volatiletech/sqlboiler/queries/qm"

	"github.com/Bnei-Baruch/gxydb-api/common"
	"github.com/Bnei-Baruch/gxydb-api/models"
)

var janusConfigCmd = &cobra.Command{
	Use:   "janus-config",
	Short: "Generate config files for rooms gateways",
	Run:   janusConfigFn,
}

func init() {
	rootCmd.AddCommand(janusConfigCmd)
}

func janusConfigFn(cmd *cobra.Command, args []string) {
	log.Info().Msg("Generating janus config files for rooms gateways")

	// init db conn
	db, err := sql.Open("postgres", common.Config.DBUrl)
	if err != nil {
		log.Fatal().Err(err).Msg("sql.Open")
	}
	db.SetMaxIdleConns(common.Config.DBMaxIdleConns)
	db.SetMaxOpenConns(common.Config.DBMaxOpenConns)
	db.SetConnMaxLifetime(common.Config.DBConnMaxLifetime)

	// open files for writing
	videoroomFile, err := os.Create("janus.plugin.videoroom.jcfg")
	if err != nil {
		log.Fatal().Err(err).Msg("os.Create videoroom config file")
	}
	defer videoroomFile.Close()
	textroomFile, err := os.Create("./janus.plugin.textroom.jcfg")
	if err != nil {
		log.Fatal().Err(err).Msg("os.Create textroom config file")
	}
	defer textroomFile.Close()

	if err := writeStaticConfig(videoroomFile, textroomFile); err != nil {
		log.Fatal().Err(err).Msg("write static config")
	}

	// fetch relevant rooms from db
	rooms, err := models.Rooms(models.RoomWhere.RemovedAt.IsNull(),
		qm.OrderBy(models.RoomColumns.GatewayUID)).All(db)
	if err != nil {
		log.Fatal().Err(err).Msg("fetch rooms from db")
	}

	log.Info().Msgf("got %d rooms from DB", len(rooms))
	for _, room := range rooms {
		_, err := fmt.Fprintf(videoroomFile,
			`room-%d : 
{
  description = "%s";
  bitrate = "64000";
  publishers = "100";
  fir_freq = "10";
  audiocodec = "opus";
  videocodec = "h264";
  h264_profile = "42e01f";
  opus_fec = "yes";
  secret = "%s";
  audiolevel_ext = "yes";
  audiolevel_event = "yes";
  audio_active_packets = "25";
  audio_level_average = "100";
  videoorient_ext = "yes";
  playoutdelay_ext = "yes";
  transport_wide_cc_ext = "yes";
};
`, room.GatewayUID, room.Name, common.Config.GatewayRoomsSecret,
		)
		if err != nil {
			log.Fatal().Err(err).Msgf("write room to videoroom config %d", room.ID)
		}

		_, err = fmt.Fprintf(textroomFile,
			`room-%d : 
{
  description = "%s";
  secret = "%s";
};
`, room.GatewayUID, room.Name, common.Config.GatewayRoomsSecret,
		)
		if err != nil {
			log.Fatal().Err(err).Msgf("write room to textroom config %d", room.ID)
		}
	}

	log.Info().Msg("All done. Don't forget to change secrets in textroom config files")
}

func writeStaticConfig(videoroomFile, textroomFile io.Writer) error {
	// head comment
	_, err := fmt.Fprintf(videoroomFile, "#\n# File automatically generated by gxydb-api on %s \n#",
		time.Now().Format(time.RFC822Z))
	if err != nil {
		return pkgerr.WithMessage(err, "[videoroom] head comment")
	}
	_, err = fmt.Fprintf(textroomFile, "#\n# File automatically generated by gxydb-api on %s \n#",
		time.Now().Format(time.RFC822Z))
	if err != nil {
		return pkgerr.WithMessage(err, "[textroom] head comment")
	}

	// operational video rooms
	_, err = fmt.Fprint(videoroomFile, `
general : 
{
};
room-1000 : 
{
  description = "FWD Protocol";
  secret = "adminpwd";
  publishers = "5";
  bitrate = "64000";
  fir_freq = "10";
  audiocodec = "opus";
  videocodec = "h264";
  h264_profile = "42e01f";
  record = "false";
  is_private = "yes";
};
room-1222 : 
{
  description = "Conference";
  secret = "adminpwd";
  publishers = "6";
  bitrate = "1000000";
  fir_freq = "10";
  audiocodec = "opus";
  videocodec = "h264";
  h264_profile = "42e01f";
  audiolevel_event = "yes";
  audio_level_average = "100";
  audio_active_packets = "25";
  transport_wide_cc_ext = "no";
  record = "false";
  is_private = "yes";
};
room-1223 : 
{
  description = "video";
  secret = "adminpwd";
  publishers = "5";
  bitrate = "600000";
  fir_freq = "10";
  audiocodec = "opus";
  videocodec = "h264";
  h264_profile = "42e01f";
  record = "false";
  is_private = "yes";
};
room-1234 : 
{
  description = "Galaxy";
  secret = "adminpwd";
  publishers = "600";
  bitrate = "600000";
  fir_freq = "10";
  audiocodec = "opus";
  videocodec = "h264";
  h264_profile = "42e01f";
  audiolevel_event = "yes";
  audio_level_average = "100";
  audio_active_packets = "25";
  transport_wide_cc_ext = "no";
  record = "false";
  is_private = "yes";
};
`)
	if err != nil {
		return pkgerr.WithMessage(err, "[videoroom] operational rooms")
	}

	// operational text rooms
	_, err = fmt.Fprint(textroomFile, `
general : 
{
  json = "indented";
};
room-1222 : 
{
  description = "Conference";
  secret = "adminpwd";
  is_private = "yes";
};
room-1234 : 
{
  description = "Galaxy Groups";
  secret = "adminpwd";
  is_private = "yes";
};
room-1000 : 
{
  description = "Galaxy Protocol";
  secret = "adminpwd";
  is_private = "yes";
};
room-1001 : 
{
  description = "Service Protocol";
  secret = "adminpwd";
  is_private = "yes";
  post = "https://gxy1:s3cr3t@gxydb.kli.one/galaxy/protocol/service";
};
`)
	if err != nil {
		return pkgerr.WithMessage(err, "[textroom] operational rooms")
	}

	return nil
}
