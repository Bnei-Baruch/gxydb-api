// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	plugins "github.com/edoshor/janus-go/plugins"
	mock "github.com/stretchr/testify/mock"
)

// AdminAPI is an autogenerated mock type for the AdminAPI type
type AdminAPI struct {
	mock.Mock
}

// AddToken provides a mock function with given fields: token, _a1
func (_m *AdminAPI) AddToken(token string, _a1 []string) (interface{}, error) {
	ret := _m.Called(token, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, []string) interface{}); ok {
		r0 = rf(token, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(token, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllowToken provides a mock function with given fields: token, _a1
func (_m *AdminAPI) AllowToken(token string, _a1 []string) (interface{}, error) {
	ret := _m.Called(token, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, []string) interface{}); ok {
		r0 = rf(token, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(token, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *AdminAPI) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisallowToken provides a mock function with given fields: token, _a1
func (_m *AdminAPI) DisallowToken(token string, _a1 []string) (interface{}, error) {
	ret := _m.Called(token, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, []string) interface{}); ok {
		r0 = rf(token, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(token, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleInfo provides a mock function with given fields: sessionID, handleID
func (_m *AdminAPI) HandleInfo(sessionID uint64, handleID uint64) (interface{}, error) {
	ret := _m.Called(sessionID, handleID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint64, uint64) interface{}); ok {
		r0 = rf(sessionID, handleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(sessionID, handleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHandles provides a mock function with given fields: sessionID
func (_m *AdminAPI) ListHandles(sessionID uint64) (interface{}, error) {
	ret := _m.Called(sessionID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint64) interface{}); ok {
		r0 = rf(sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields:
func (_m *AdminAPI) ListSessions() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTokens provides a mock function with given fields:
func (_m *AdminAPI) ListTokens() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagePlugin provides a mock function with given fields: request
func (_m *AdminAPI) MessagePlugin(request plugins.PluginRequest) (interface{}, error) {
	ret := _m.Called(request)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(plugins.PluginRequest) interface{}); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(plugins.PluginRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveToken provides a mock function with given fields: token
func (_m *AdminAPI) RemoveToken(token string) (interface{}, error) {
	ret := _m.Called(token)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
